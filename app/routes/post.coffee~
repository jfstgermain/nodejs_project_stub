module.exports.registerRoutes = (app, mongoose) ->
	Post = mongoose.model "Post"
	Tag = mongoose.model "Tag"

	# Middlewares
	createPost = (req, res, next) ->
		t = req.body.txt_message.split "\n"
		# TODO (jfstgermain - Fri Jul 15 23:56:09 EDT 2011):
		# do not forget to replace the hardcoded stream id
		params = {streamId: "pubsub", dateCreated: new Date(), author: req.session.user.id}
		
		if t.length > 1
			params.title = t.shift()
			params.body = t.join "<br />"
		else
			params.title = t.join " "
			params.body = ""
			
		hashtags = params.body.match /\B#(\w+)\b/g ? []
		places = params.body.match /\B&(\w+)\b/g ? []
		#params.hashtags = []
		
		console.log "************hashtags #{hashtags}"
		req.post = new Post(params)
		
		# Note (jfstgermain - Mon Jul 11 22:38:34 EDT 2011):
		# when updating a posting, decrease tag count and re-update / insert
		if hashtags?
		  for hashtag in hashtags
		    do (hashtag) ->
		      req.post.hashtags.push {hashtag}
			  Tag.update({name: hashtag}, {$inc: {mentionCount: 1}}, true)
          
    if places?
      for place in places
        do (place) ->
          req.post.places.push {place}
          Place.update({name: place}, {$inc: {mentionCount: 1}}, true)
    
		req.post.save (err) ->
			# need to wait that the save call has terminted b4 publishing...
			if not err?
			  next()
			else
				console.error err
				
  # Middleware that loads a Post and checks if user is the owner
  # @author jfstgermain
	loadOwnedPost = (req, res, next) ->
		# If [ user is not the owner of the post ] Then [ Add a flash message and skip next ]
		Post.findOne {"id": req.params.id, "author": req.session.user.id}, (err, post) ->
			if post?
				req.post = post
				next()
			else
				req.flash "error", "The post you're trying to delete doesn't seem to belong to you!  We're sorry for the inconvenience.  Please contact the system administrator for further assistance."

	# Sends post to redis to be published under chanel "country.state.city.tag"
	publishPost = (user, hashtag, post) ->
		app.redisClient.publish "#{req.session.user.location.pattern}.#{hashtag}", JSON.stringify({schema: "Post", id: post.id})

	# Routes
	app.post "/post/save", createPost, (req, res) ->
		console.log "STRINGIFY: #{JSON.stringify({schema: "Post", id: req.post.id})}"
		publishPost req.session.user hashtag req.post for hashtag in req.post.hashtags
		res.send 200

	app.del "/post/:id", loadOwnedPost, (req, res) ->
		re.post.remove()
